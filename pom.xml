<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.1.7</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>dev.pollito</groupId>
	<artifactId>springcityexplorer</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>springcityexplorer</name>
	<description>Java Spring Boot project that utilizes autogenerated code from an OpenAPI specification to provide weather and news information for a given city</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>

		<!-- Starter for building web applications using Spring MVC. Includes Tomcat as the default embedded container -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- Provides development-time features such as automatic restarts and live reloads for a smoother development experience. To be used only during development -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>

		<!-- Simplifies Java code by reducing boilerplate (e.g., getters, setters, constructors, etc.) -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- Provides core items necessary for testing Spring Boot applications, including JUnit, Hamcrest, and Mockito -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Simplifies the implementation of mappings between Java bean types	-->
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>1.5.3.Final</version>
		</dependency>

		<!-- Enables handling of Java 8 Optionals and other nullable types within Jackson, useful for dealing with JSON fields that may be absent -->
		<dependency>
			<groupId>org.openapitools</groupId>
			<artifactId>jackson-databind-nullable</artifactId>
			<version>0.2.6</version>
			<scope>compile</scope>
		</dependency>

		<!--
			Integrates Swagger 2 for API documentation into a Spring Boot application.
			Excludes swagger-annotations from io.swagger.core.v3 to avoid conflicts between different versions
           	of swagger-annotations brought in by other dependencies.
		-->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>3.0.0</version>
			<exclusions>
				<exclusion>
					<groupId>io.swagger.core.v3</groupId>
					<artifactId>swagger-annotations</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Includes the swagger-core-jakarta library, used for API modeling, which includes annotations and core functionality. -->
		<dependency>
			<groupId>io.swagger.core.v3</groupId>
			<artifactId>swagger-core-jakarta</artifactId>
			<version>2.2.8</version>
		</dependency>

		<!--
		  Integrates the Hibernate Validator and the Validation API, providing a seamless experience for adding validation capabilities to Spring Boot applications.
		  The specified version ensures compatibility with other Spring Boot 3.x components
		-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
			<version>3.1.2</version>
			<scope>compile</scope>
		</dependency>

		<!-- Provides the standard Java annotations API. It's used for general purpose annotations like @Generated, @PostConstruct, etc. -->
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>javax.annotation-api</artifactId>
			<version>1.3.2</version>
			<scope>compile</scope>
		</dependency>

		<!-- Integrates the OpenFeign library for making HTTP clients easier to build and consume within a Spring application. -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-openfeign</artifactId>
			<version>4.0.3</version>
			<scope>compile</scope>
		</dependency>

		<!-- Integrates Feign with OkHttp, a high-performance HTTP client. -->
		<dependency>
			<groupId>io.github.openfeign</groupId>
			<artifactId>feign-okhttp</artifactId>
			<version>12.4</version>
			<scope>compile</scope>
		</dependency>

		<!-- Integrates the Jackson library with Feign for serialization and deserialization of request/response bodies. -->
		<dependency>
			<groupId>io.github.openfeign</groupId>
			<artifactId>feign-jackson</artifactId>
			<version>12.4</version>
			<scope>compile</scope>
		</dependency>

		<!-- Integrates Gson with Feign for JSON processing. -->
		<dependency>
			<groupId>io.github.openfeign</groupId>
			<artifactId>feign-gson</artifactId>
			<version>12.4</version>
			<scope>compile</scope>
		</dependency>

		<!-- Provides annotations for software defect detection. -->
		<dependency>
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>jsr305</artifactId>
			<version>3.0.2</version>
			<scope>compile</scope>
		</dependency>

		<!-- For the unit testing in generated code. -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>5.10.0</version>
			<scope>compile</scope>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<!--
				Simplifies the packaging and running of Spring Boot applications.
				Generates a runnable 'uber' jar file, which includes dependencies and resource files.
				Excludes Lombok from the final packaged application
			-->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>

			<!--
				Automatically formats Java source code in the project according to Google's Java Style Guide.
				The 'format' goal is executed to ensure consistent code style across the project
			-->
			<plugin>
				<groupId>com.spotify.fmt</groupId>
				<artifactId>fmt-maven-plugin</artifactId>
				<version>2.20</version>
				<executions>
					<execution>
						<goals>
							<goal>format</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!--
			  Specifies the Java compiler settings

			  1. MapStruct Processor: Generates implementation code for MapStruct mappings at compile time.
			  2. Lombok: Reduce boilerplate code.
			  3. Lombok-Mapstruct Binding: Integration between Lombok and MapStruct.
			-->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.11.0</version>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>1.5.3.Final</version>
						</path>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
						<dependency>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok-mapstruct-binding</artifactId>
							<version>0.2.0</version>
						</dependency>
					</annotationProcessorPaths>
					<compilerArgs>
						<arg>-parameters</arg>
					</compilerArgs>
				</configuration>
			</plugin>

			<!-- Generates API client libraries, server stubs, documentation and configuration automatically given an OpenAPI Spec. -->
			<plugin>
				<groupId>org.openapitools</groupId>
				<artifactId>openapi-generator-maven-plugin</artifactId>
				<version>7.2.0</version>
				<executions>
					<execution>
						<id>generation from springcityexplorer</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<inputSpec>${project.basedir}/src/main/resources/openapi/springcityexplorer.yaml</inputSpec>
							<generatorName>spring</generatorName>
							<output>${project.build.directory}/generated-sources/openapi/</output>
							<apiPackage>dev.pollito.springcityexplorer.api</apiPackage>
							<modelPackage>dev.pollito.springcityexplorer.models</modelPackage>
							<configOptions>
								<interfaceOnly>true</interfaceOnly>
								<useSpringBoot3>true</useSpringBoot3>
								<useEnumCaseInsensitive>true</useEnumCaseInsensitive>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generation for weatherstack</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<inputSpec>${project.basedir}/src/main/resources/openapi/feignclient/weatherstack.yaml</inputSpec>
							<generatorName>java</generatorName>
							<library>feign</library>
							<output>${project.build.directory}/generated-sources/openapi/</output>
							<apiPackage>com.weatherstack.api</apiPackage>
							<modelPackage>com.weatherstack.models</modelPackage>
							<configOptions>
								<feignClient>true</feignClient>
								<interfaceOnly>true</interfaceOnly>
							</configOptions>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Runs your unit tests against automatically modified versions of your application code. -->
			<plugin>
				<groupId>org.pitest</groupId>
				<artifactId>pitest-maven</artifactId>
				<version>1.15.3</version>
				<executions>
					<execution>
						<id>pit-report</id>
						<phase>test</phase>
						<goals>
							<goal>mutationCoverage</goal>
						</goals>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.pitest</groupId>
						<artifactId>pitest-junit5-plugin</artifactId>
						<version>1.2.1</version>
					</dependency>
				</dependencies>
				<configuration>
					<excludedClasses>
						<param>dev.pollito.springcityexplorer.api.*</param>
						<param>dev.pollito.springcityexplorer.models.*</param>
					</excludedClasses>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
